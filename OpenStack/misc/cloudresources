#!/usr/bin/env python
import sqlalchemy
import json
import web
import re
import atexit

"""
REST service that provides information about cloud resources, machine types,
and project quotas.  Should be run on each management node in the cloud.
"""

NOVA_CONF = '/etc/nova/nova.conf'

urls = (
	'/resources', 'CloudResources',
	'/machinetypes', 'MachineTypes',
	'/quotas/(.*)', 'Quotas'
)

web.config.debug = False
app = web.application(urls, globals())

with open(NOVA_CONF, 'r') as f:
	for line in f:
		if line.startswith('--sql_connection'):
			db_addr = line.strip().split('=', 1)[1]

conn = sqlalchemy.create_engine(db_addr).connect()

@atexit.register
def cleanup():
	conn.close()

class CloudResources:
	def GET(self):
		node_usage = conn.execute(
			"SELECT host, "
			"vcpus,vcpus_used, "
			"vcpus-vcpus_used AS vcpus_avail, "
			"memory_mb,memory_mb_used, "
			"memory_mb-memory_mb_used AS memory_mb_avail "
			"FROM compute_nodes "
			"INNER JOIN services AS s ON service_id=s.id "
			"WHERE binary='nova-compute' AND s.deleted=0 AND disabled=0"
		)
	
		total_usage = conn.execute(
			"SELECT CAST(SUM(vcpus) AS SIGNED) AS vcpus, "
			"CAST(SUM(vcpus_used) AS SIGNED) AS vcpus_used, "
			"CAST(SUM(vcpus)-SUM(c.vcpus_used) AS SIGNED) AS vcpus_avail, "
			"CAST(SUM(memory_mb) AS SIGNED) AS memory_mb, "
			"CAST(SUM(memory_mb_used) AS SIGNED) AS memory_mb_used, "
			"CAST(SUM(memory_mb)-SUM(memory_mb_used) AS SIGNED) AS memory_mb_avail "
			"FROM compute_nodes "
			"INNER JOIN services AS s ON service_id=s.id "
			"WHERE binary='nova-compute' AND s.deleted=0 AND disabled=0"
		)

		resources = {}
	
		for row in node_usage:
			resources[row['host']] = dict(row.items())
			del resources[row['host']]['host']
	
		resources['total'] = dict(total_usage.first().items())
	
		node_usage.close()
		total_usage.close()
		return json.dumps(resources)

class MachineTypes:
	def GET(self):
		result = conn.execute(
			"SELECT name,vcpus,memory_mb,local_gb,swap "
			"FROM instance_types "
			"WHERE deleted=0"
		)

		machine_types = {}

		for row in result:
			machine_types[row['name']] = dict(row.items())
			del machine_types[row['name']]['name']

		result.close()
		return json.dumps(machine_types)

class Quotas:
	def GET(self, project):
		total = conn.execute(
			"SELECT instances,cores,volumes,gigabytes,floating_ips "
			"FROM quotas "
			"WHERE project_id=%(project)s AND deleted=0",
			project=project
		)

		used_compute = conn.execute(
			"SELECT COUNT(1) as instances, "
			"IFNULL(CAST(SUM(vcpus) AS SIGNED), 0) as cores "
			"FROM instances "
			"WHERE project_id=%(project)s AND deleted=0",
			project=project
		)

		used_volume = conn.execute(
			"SELECT COUNT(1) as volumes, "
			"IFNULL(CAST(SUM(size) AS SIGNED), 0) as gigabytes "
			"FROM volumes "
			"WHERE project_id=%(project)s AND deleted=0",
			project=project
		)

		used_ip = conn.execute(
			"SELECT COUNT(1) as floating_ips "
			"FROM floating_ips "
			"WHERE project_id=%(project)s AND deleted=0",
			project=project
		)

		quotas = {}
		try:
			quotas['total'] = dict(total.first())
		except TypeError:
			return "Unknown project"
		quotas['used'] = dict(used_compute.first().items() + used_volume.first().items() + used_ip.first().items())
		return json.dumps(quotas)

if __name__ == '__main__':
	app.run()
