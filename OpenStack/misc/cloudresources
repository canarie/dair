#!/usr/bin/env python
import sqlalchemy
import json
import web
import re
import atexit

"""
Performs database queries across all zones and returns total, used and
available resources for each compute node plus the cumulative totals
for each zone
"""

NOVA_CONF = '/etc/nova/nova.conf'

urls = (
	'/resources', 'CloudResources',
	'/machinetypes', 'MachineTypes',
	'/quotas/(.*)', 'Quotas'
)

web.config.debug = False
app = web.application(urls, globals())

with open(NOVA_CONF, 'r') as f:
	for line in f:
		if line.startswith('--sql_connection'):
			db_addr = line.strip().split('=', 1)[1]

conn = sqlalchemy.create_engine(db_addr).connect()

@atexit.register
def cleanup():
	conn.close()

class CloudResources:
	def GET(self):
		node_usage = conn.execute(
			"SELECT s.host, \
			c.vcpus,c.vcpus_used, \
			c.vcpus-c.vcpus_used AS vcpus_avail, \
			c.memory_mb,c.memory_mb_used, \
			c.memory_mb-c.memory_mb_used AS memory_mb_avail \
			FROM compute_nodes AS c \
			INNER JOIN services AS s ON c.service_id=s.id \
			WHERE s.binary='nova-compute' AND s.deleted=0 AND s.disabled=0"
		)
	
		total_usage = conn.execute(
			"SELECT CAST(SUM(c.vcpus) AS SIGNED) AS vcpus, \
			CAST(SUM(c.vcpus_used) AS SIGNED) AS vcpus_used, \
			CAST(SUM(c.vcpus)-SUM(c.vcpus_used) AS SIGNED) AS vcpus_avail, \
			CAST(SUM(c.memory_mb) AS SIGNED) AS memory_mb, \
			CAST(SUM(c.memory_mb_used) AS SIGNED) AS memory_mb_used, \
			CAST(SUM(c.memory_mb)-SUM(c.memory_mb_used) AS SIGNED) AS memory_mb_avail \
			FROM compute_nodes AS c \
			INNER JOIN services AS s ON c.service_id=s.id \
			WHERE s.binary='nova-compute' AND s.deleted=0 AND s.disabled=0"
		)

		resources = {}
	
		for row in node_usage:
			resources[row['host']] = dict(row.items())
			del resources[row['host']]['host']
	
		resources['total'] = dict(total_usage.first().items())
	
		node_usage.close()
		total_usage.close()
		return json.dumps(resources)

class MachineTypes:
	def GET(self):
		result = conn.execute(
			"SELECT name,vcpus,memory_mb,local_gb_swap \
			FROM instance_types \
			WHERE deleted=0"
		)

		machine_types = {}

		for row in result:
			machine_types[row['name']] = dict(row.items())
			del machine_types[row['name']]['name']

		result.close()
		return json.dumps(machine_types)

class Quotas:
	def GET(self, project):
		result = conn.execute(
			"SELECT instances,cores,volumes,gigabytes,floating_ups,metadate_items \
			FROM quotas \
			WHERE project_id=%(project)s"
		)

		quotas = dict(result.first())
		return json.dumps(quotas)

if __name__ == '__main__':
	app.run()
